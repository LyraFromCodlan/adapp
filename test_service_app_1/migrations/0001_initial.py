# Generated by Django 4.0.6 on 2022-08-02 16:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[(1, 'Admin'), (2, 'CompanyAdmin'), (3, 'CompanyManager')], default='', max_length=20, verbose_name='Роль')),
                ('first_name', models.CharField(default='', max_length=50, verbose_name='Имя')),
                ('surname', models.CharField(default='', max_length=50, verbose_name='Фамилия')),
                ('position', models.CharField(default='', max_length=50, verbose_name='Назначение клиентов')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(default='', max_length=50, unique=True)),
                ('token', models.CharField(default='', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Facebook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(default='', max_length=50, unique=True)),
                ('token', models.CharField(default='', max_length=100, unique=True)),
                ('login', models.CharField(default='', max_length=50, unique=True)),
                ('password', models.CharField(default='', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Google',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(default='', max_length=50, unique=True)),
                ('developer_token', models.CharField(default='', max_length=100, unique=True)),
                ('gclient_id', models.CharField(default='', max_length=50, unique=True)),
                ('client_secret', models.CharField(default='', max_length=50, unique=True)),
                ('refresh_token', models.CharField(default='', max_length=100, unique=True)),
                ('login_customer_id', models.CharField(default='', max_length=50, unique=True)),
                ('login', models.CharField(default='', max_length=50, unique=True)),
                ('password', models.CharField(default='', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MyTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(default='', max_length=50, unique=True)),
                ('mclient_id', models.CharField(default='', max_length=50, unique=True)),
                ('client_secret', models.CharField(default='', max_length=100, unique=True)),
                ('token', models.CharField(default='', max_length=100, unique=True)),
                ('refresh_token', models.CharField(default='', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TikTok',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(default='', max_length=50, unique=True)),
                ('access_token', models.CharField(default='', max_length=100, unique=True)),
                ('refresh_token', models.CharField(default='', max_length=100, unique=True)),
                ('client_key', models.CharField(default='', max_length=100, unique=True)),
                ('client_secret', models.CharField(default='', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='VK',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(default='', max_length=50, unique=True)),
                ('token', models.CharField(default='', max_length=100, unique=True)),
                ('version', models.CharField(default='', max_length=100, unique=True)),
                ('id_rk', models.CharField(default='', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Yandex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(default='', max_length=50, unique=True)),
                ('token', models.CharField(default='', max_length=100, unique=True)),
                ('client_login', models.CharField(default='', max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('client_id', models.AutoField(primary_key=True, serialize=False)),
                ('client_name', models.CharField(default='', max_length=50, verbose_name='')),
                ('company_id', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='test_service_app_1.company')),
                ('has_fb', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='test_service_app_1.facebook')),
                ('has_google', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='test_service_app_1.google')),
                ('has_myTarget', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='test_service_app_1.mytarget')),
                ('has_tiktok', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='test_service_app_1.tiktok')),
                ('has_vk', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='test_service_app_1.vk')),
                ('has_yandex', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='test_service_app_1.yandex')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AddServiceData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_user_name', models.CharField(max_length=200)),
                ('info', models.TextField()),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
